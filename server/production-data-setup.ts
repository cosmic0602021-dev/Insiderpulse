/**
 * ÌîÑÎ°úÎçïÏÖò Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï Ïä§ÌÅ¨Î¶ΩÌä∏
 * Í∞ÄÏßú Îç∞Ïù¥ÌÑ∞ ÏôÑÏ†Ñ Ï†úÍ±∞ Î∞è Ïã§Ï†ú SEC/Finnhub Îç∞Ïù¥ÌÑ∞Îßå ÏàòÏßë
 */

import { storage } from './storage';

async function setupProductionData() {
  console.log('üöÄ Starting production data setup...');
  console.log('‚ö†Ô∏è  ONLY REAL DATA - NO FAKE/SIMULATION DATA');

  try {
    // 1. Ïã§Ï†ú SEC EDGAR Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏûë
    console.log('\nüìä Step 1: Collecting real-time SEC EDGAR data...');
    try {
      const { secEdgarCollector, setBroadcaster } = await import('./sec-edgar-collector');

      setBroadcaster((type: string, data: any) => {
        console.log(`  üì° SEC: ${type} - ${JSON.stringify(data).substring(0, 100)}`);
      });

      const secCount = await secEdgarCollector.collectLatestForm4Filings(30);
      console.log(`  ‚úÖ SEC Collection: ${secCount} real trades collected`);
    } catch (secError) {
      console.error(`  ‚ùå SEC Collector failed:`, secError);
    }

    // 2. MarketBeat Î∞±ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
    console.log('\nüìä Step 2: Collecting MarketBeat backup data...');
    try {
      const { marketBeatCollector, setBroadcaster } = await import('./marketbeat-collector');

      setBroadcaster((type: string, data: any) => {
        console.log(`  üì° MarketBeat: ${type}`);
      });

      const mbCount = await marketBeatCollector.collectLatestTrades(50);
      console.log(`  ‚úÖ MarketBeat Collection: ${mbCount} real trades collected`);
    } catch (mbError) {
      console.error(`  ‚ùå MarketBeat Collector failed:`, mbError);
    }

    // 3. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉÅÌÉú ÌôïÏù∏
    console.log('\nüìä Step 3: Verifying database state...');
    const trades = await storage.getInsiderTrades(10, 0);
    console.log(`  ‚úÖ Total trades in database: ${trades.length}`);

    if (trades.length > 0) {
      const latestTrade = trades[0];
      console.log(`  üìÖ Latest trade: ${latestTrade.companyName} (${latestTrade.ticker})`);
      console.log(`  üìÖ Filed date: ${latestTrade.filedDate}`);
      console.log(`  üí∞ Value: $${latestTrade.totalValue?.toLocaleString()}`);
    }

    // 4. ÌÜµÍ≥Ñ ÌôïÏù∏
    const stats = await storage.getTradingStats(false);
    console.log(`\nüìà Database Statistics:`);
    console.log(`  üìä Today's trades: ${stats.todayTrades}`);
    console.log(`  üíµ Total volume: $${stats.totalVolume.toLocaleString()}`);

    console.log('\n‚úÖ Production data setup completed successfully!');
    console.log('üîÑ Real-time data collection is active and running');

  } catch (error) {
    console.error('‚ùå Production data setup failed:', error);
    throw error;
  }
}

// Run if executed directly
if (require.main === module) {
  setupProductionData()
    .then(() => {
      console.log('\n‚úÖ Setup complete - Application ready for production use');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Setup failed:', error);
      process.exit(1);
    });
}

export { setupProductionData };
