/**
 * ÏÉàÎ°úÏö¥ API ÎùºÏö∞Ìä∏ - Ìñ•ÏÉÅÎêú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏä§ÌÖúÏö©
 */

import { Router } from 'express';
import { newDataCollectionService } from '../new-data-collection-service';
import { unifiedScraperSystem } from '../scrapers/unified-scraper-system';

const router = Router();

/**
 * GET /api/v2/trades - ÏµúÏã† ÎÇ¥Î∂ÄÏûê Í±∞Îûò Îç∞Ïù¥ÌÑ∞
 * ÏÉàÎ°úÏö¥ ÌÜµÌï© Ïä§ÌÅ¨ÎûòÌïë ÏãúÏä§ÌÖúÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï†úÍ≥µ
 */
router.get('/trades', async (req, res) => {
  try {
    const {
      limit = 50,
      ticker,
      minValue,
      maxValue,
      transactionType,
      minConfidence = 70,
      verifiedOnly = false
    } = req.query;

    const filters = {
      ticker: ticker as string,
      minValue: minValue ? parseInt(minValue as string) : undefined,
      maxValue: maxValue ? parseInt(maxValue as string) : undefined,
      transactionType: transactionType as string,
      minConfidence: parseInt(minConfidence as string),
      verifiedOnly: verifiedOnly === 'true'
    };

    const trades = newDataCollectionService.getLatestTrades(
      parseInt(limit as string),
      filters
    );

    res.json({
      success: true,
      count: trades.length,
      data: trades,
      meta: {
        filters,
        timestamp: new Date().toISOString(),
        source: 'unified-scraper-system-v2'
      }
    });

  } catch (error) {
    console.error('‚ùå API Ïò§Î•ò (/trades):', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * GET /api/v2/stats - Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÌÜµÍ≥Ñ
 */
router.get('/stats', async (req, res) => {
  try {
    const statistics = unifiedScraperSystem.getStatistics();

    res.json({
      success: true,
      statistics,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå API Ïò§Î•ò (/stats):', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/v2/collect - ÏàòÎèô Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ïã§Ìñâ
 */
router.post('/collect', async (req, res) => {
  try {
    console.log('üîß ÏàòÎèô Îç∞Ïù¥ÌÑ∞ ÏàòÏßë API Ìò∏Ï∂úÎê®');

    const result = await newDataCollectionService.executeManualCollection();

    res.json({
      success: true,
      result,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå API Ïò§Î•ò (/collect):', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/v2/status - ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏
 */
router.get('/status', async (req, res) => {
  try {
    const status = newDataCollectionService.getServiceStatus();

    res.json({
      success: true,
      status,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå API Ïò§Î•ò (/status):', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/v2/jobs - Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏûëÏóÖ ÏÉÅÌÉú
 */
router.get('/jobs', async (req, res) => {
  try {
    const jobs = newDataCollectionService.getJobStatuses();

    res.json({
      success: true,
      jobs,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå API Ïò§Î•ò (/jobs):', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/v2/jobs/:jobId/toggle - ÏûëÏóÖ ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî
 */
router.post('/jobs/:jobId/toggle', async (req, res) => {
  try {
    const { jobId } = req.params;
    const { enabled } = req.body;

    const success = newDataCollectionService.toggleJob(jobId, enabled);

    if (success) {
      res.json({
        success: true,
        message: `ÏûëÏóÖ ${jobId} ${enabled ? 'ÌôúÏÑ±Ìôî' : 'ÎπÑÌôúÏÑ±Ìôî'} ÏôÑÎ£å`,
        timestamp: new Date().toISOString()
      });
    } else {
      res.status(404).json({
        success: false,
        error: 'ÏûëÏóÖÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§'
      });
    }

  } catch (error) {
    console.error('‚ùå API Ïò§Î•ò (/jobs/toggle):', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/v2/search - Í≥†Í∏â Í±∞Îûò Í≤ÄÏÉâ
 */
router.get('/search', async (req, res) => {
  try {
    const {
      q, // Í≤ÄÏÉâ ÏøºÎ¶¨
      ticker,
      insider,
      company,
      minValue,
      maxValue,
      startDate,
      endDate,
      transactionType,
      minConfidence = 0,
      verifiedOnly = false,
      limit = 100,
      sortBy = 'date',
      sortOrder = 'desc'
    } = req.query;

    // Í∏∞Î≥∏ ÌïÑÌÑ∞
    const filters = {
      ticker: ticker as string,
      minValue: minValue ? parseInt(minValue as string) : undefined,
      maxValue: maxValue ? parseInt(maxValue as string) : undefined,
      transactionType: transactionType as string,
      minConfidence: parseInt(minConfidence as string),
      verifiedOnly: verifiedOnly === 'true'
    };

    let trades = unifiedScraperSystem.getFilteredTrades(filters);

    // ÌÖçÏä§Ìä∏ Í≤ÄÏÉâ (ÏøºÎ¶¨Í∞Ä ÏûàÎäî Í≤ΩÏö∞)
    if (q) {
      const query = (q as string).toLowerCase();
      trades = trades.filter(trade =>
        trade.ticker.toLowerCase().includes(query) ||
        trade.companyName.toLowerCase().includes(query) ||
        trade.insiderName.toLowerCase().includes(query)
      );
    }

    // Í∞úÎ≥Ñ ÌÖçÏä§Ìä∏ ÌïÑÌÑ∞
    if (insider) {
      const insiderQuery = (insider as string).toLowerCase();
      trades = trades.filter(trade =>
        trade.insiderName.toLowerCase().includes(insiderQuery)
      );
    }

    if (company) {
      const companyQuery = (company as string).toLowerCase();
      trades = trades.filter(trade =>
        trade.companyName.toLowerCase().includes(companyQuery)
      );
    }

    // ÎÇ†Ïßú Î≤îÏúÑ ÌïÑÌÑ∞
    if (startDate) {
      trades = trades.filter(trade =>
        trade.transactionDate >= (startDate as string)
      );
    }

    if (endDate) {
      trades = trades.filter(trade =>
        trade.transactionDate <= (endDate as string)
      );
    }

    // Ï†ïÎ†¨
    const sortField = sortBy as string;
    const order = sortOrder === 'desc' ? -1 : 1;

    trades.sort((a, b) => {
      let aVal, bVal;

      switch (sortField) {
        case 'value':
          aVal = a.totalValue;
          bVal = b.totalValue;
          break;
        case 'confidence':
          aVal = a.confidence;
          bVal = b.confidence;
          break;
        case 'date':
        default:
          aVal = new Date(a.transactionDate).getTime();
          bVal = new Date(b.transactionDate).getTime();
          break;
      }

      return (aVal - bVal) * order;
    });

    // Ï†úÌïú
    const limitedTrades = trades.slice(0, parseInt(limit as string));

    res.json({
      success: true,
      count: limitedTrades.length,
      totalCount: trades.length,
      data: limitedTrades,
      meta: {
        query: {
          q,
          ticker,
          insider,
          company,
          minValue,
          maxValue,
          startDate,
          endDate,
          transactionType,
          minConfidence,
          verifiedOnly,
          limit,
          sortBy,
          sortOrder
        },
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå API Ïò§Î•ò (/search):', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/v2/ticker/:ticker - ÌäπÏ†ï Ìã∞Ïª§Ïùò ÎÇ¥Î∂ÄÏûê Í±∞Îûò
 */
router.get('/ticker/:ticker', async (req, res) => {
  try {
    const { ticker } = req.params;
    const { limit = 50 } = req.query;

    const trades = unifiedScraperSystem.getFilteredTrades({
      ticker: ticker.toUpperCase()
    });

    // ÏµúÏã†Ïàú Ï†ïÎ†¨
    const sortedTrades = trades
      .sort((a, b) => new Date(b.transactionDate).getTime() - new Date(a.transactionDate).getTime())
      .slice(0, parseInt(limit as string));

    // ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
    const stats = {
      totalTrades: trades.length,
      totalValue: trades.reduce((sum, t) => sum + t.totalValue, 0),
      averageValue: trades.reduce((sum, t) => sum + t.totalValue, 0) / trades.length || 0,
      buyTrades: trades.filter(t => t.transactionType === 'BUY').length,
      sellTrades: trades.filter(t => t.transactionType === 'SELL').length,
      averageConfidence: trades.reduce((sum, t) => sum + t.confidence, 0) / trades.length || 0
    };

    res.json({
      success: true,
      ticker: ticker.toUpperCase(),
      count: sortedTrades.length,
      totalCount: trades.length,
      data: sortedTrades,
      statistics: stats,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå API Ïò§Î•ò (/ticker):', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/v2/health - Ìó¨Ïä§ Ï≤¥ÌÅ¨
 */
router.get('/health', async (req, res) => {
  try {
    const stats = unifiedScraperSystem.getStatistics();
    const serviceStatus = newDataCollectionService.getServiceStatus();

    const health = {
      status: 'healthy',
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      dataCount: stats.totalTrades,
      lastUpdate: stats.lastUpdated,
      services: {
        dataCollection: serviceStatus.initialized,
        unifiedScraper: true
      }
    };

    res.json({
      success: true,
      health,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå API Ïò§Î•ò (/health):', error);
    res.status(500).json({
      success: false,
      status: 'unhealthy',
      error: error.message
    });
  }
});

export default router;