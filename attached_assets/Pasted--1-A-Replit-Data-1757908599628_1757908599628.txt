# 내부자 거래 정보 로드 문제 해결 가이드

## 🔍 **1단계: 문제 위치 파악하기**

### A. 데이터베이스에 데이터가 있는지 확인

**Replit Database 탭에서 직접 확인**:
```sql
-- 총 데이터 개수 확인
SELECT COUNT(*) FROM insider_trades;

-- 최신 10개 데이터 확인
SELECT * FROM insider_trades ORDER BY filing_date DESC LIMIT 10;

-- 컬럼 구조 확인
\d insider_trades;

-- 오늘 날짜 데이터가 있는지 확인
SELECT COUNT(*) FROM insider_trades WHERE filing_date >= CURRENT_DATE;
```

### B. 백엔드 API가 작동하는지 확인

**Replit 콘솔에서 직접 테스트**:
```bash
# API 엔드포인트 직접 호출
curl http://localhost:3000/api/trades

# 또는 브라우저에서 직접 접근
# https://your-replit-url/api/trades
```

### C. 프론트엔드에서 데이터를 받고 있는지 확인

**브라우저 개발자 도구 → Console 탭에서**:
```javascript
// 수동으로 API 호출 테스트
fetch('/api/trades')
  .then(response => response.json())
  .then(data => {
    console.log('API 응답:', data);
    console.log('데이터 개수:', data.length);
  })
  .catch(error => console.error('에러:', error));
```

## 🛠️ **2단계: 일반적인 문제들과 해결방법**

### 문제 1: 데이터베이스가 비어있음

**해결방법**:
```javascript
// SEC 데이터 수집 함수 수동 실행
const testDataCollection = async () => {
  try {
    console.log('SEC 데이터 수집 시작...');
    
    const response = await fetch('https://www.sec.gov/cgi-bin/browse-edgar?action=getcurrent&CIK=&type=4&company=&dateb=&owner=include&start=0&count=40&output=atom', {
      headers: {
        'User-Agent': 'YourCompany admin@yourcompany.com', // 실제 정보로 변경
        'Accept': 'application/atom+xml'
      }
    });
    
    console.log('SEC 응답 상태:', response.status);
    
    if (response.ok) {
      const xmlText = await response.text();
      console.log('받은 XML 길이:', xmlText.length);
      console.log('XML 샘플:', xmlText.substring(0, 500));
      
      // XML 파싱 테스트
      // 여기에 기존 파싱 로직 추가
    } else {
      console.error('SEC 요청 실패:', response.status, response.statusText);
    }
  } catch (error) {
    console.error('데이터 수집 오류:', error);
  }
};

// Replit 콘솔에서 실행
testDataCollection();
```

### 문제 2: API 엔드포인트 오류

**백엔드 코드 확인 및 수정**:
```javascript
// app.js 또는 server.js에서
app.get('/api/trades', async (req, res) => {
  console.log('API 호출됨 - /api/trades');
  
  try {
    // 데이터베이스 연결 테스트
    const testQuery = await pool.query('SELECT 1');
    console.log('DB 연결 성공');
    
    // 실제 데이터 조회
    const result = await pool.query(`
      SELECT 
        company_name,
        ticker,
        trader_name,
        trade_type,
        share_count,
        price_per_share,
        total_value,
        filing_date
      FROM insider_trades 
      ORDER BY filing_date DESC 
      LIMIT 100
    `);
    
    console.log(`조회된 거래 수: ${result.rows.length}`);
    
    // 데이터가 없는 경우 샘플 데이터 반환 (테스트용)
    if (result.rows.length === 0) {
      console.log('실제 데이터가 없어서 샘플 데이터 반환');
      return res.json([
        {
          company_name: 'Apple Inc.',
          ticker: 'AAPL',
          trader_name: 'John Doe',
          trade_type: 'Sale',
          share_count: 1000,
          price_per_share: 150.00,
          total_value: 150000,
          filing_date: new Date().toISOString()
        }
      ]);
    }
    
    res.json(result.rows);
  } catch (error) {
    console.error('API 오류:', error);
    res.status(500).json({ 
      error: 'Database error',
      message: error.message 
    });
  }
});
```

### 문제 3: 프론트엔드 렌더링 문제

**React 컴포넌트 수정**:
```javascript
import React, { useState, useEffect } from 'react';

const TradeDashboard = () => {
  const [trades, setTrades] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchTrades();
  }, []);

  const fetchTrades = async () => {
    console.log('거래 데이터 요청 시작...');
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/trades');
      console.log('응답 상태:', response.status);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('받은 데이터:', data);
      console.log('데이터 개수:', data.length);
      
      setTrades(data);
    } catch (err) {
      console.error('Fetch 오류:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // 로딩 상태 표시
  if (loading) {
    return (
      <div className="loading">
        <p>거래 데이터를 불러오는 중...</p>
      </div>
    );
  }

  // 에러 상태 표시
  if (error) {
    return (
      <div className="error">
        <p>데이터 로드 실패: {error}</p>
        <button onClick={fetchTrades}>다시 시도</button>
      </div>
    );
  }

  // 데이터가 없는 경우
  if (trades.length === 0) {
    return (
      <div className="no-data">
        <p>표시할 거래 데이터가 없습니다.</p>
        <button onClick={fetchTrades}>새로고침</button>
      </div>
    );
  }

  // 정상 데이터 표시
  return (
    <div className="trade-dashboard">
      <h2>내부자 거래 ({trades.length}개)</h2>
      <button onClick={fetchTrades}>새로고침</button>
      
      <div className="trade-list">
        {trades.map((trade, index) => (
          <div key={index} className="trade-card">
            <h3>{trade.company_name} ({trade.ticker})</h3>
            <p><strong>거래자:</strong> {trade.trader_name}</p>
            <p><strong>거래유형:</strong> {trade.trade_type}</p>
            <p><strong>주식수:</strong> {trade.share_count?.toLocaleString()}</p>
            <p><strong>가격:</strong> ${trade.price_per_share}</p>
            <p><strong>총액:</strong> ${trade.total_value?.toLocaleString()}</p>
            <p><strong>신고일:</strong> {new Date(trade.filing_date).toLocaleDateString()}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default TradeDashboard;
```

## 🚨 **3단계: 긴급 임시 해결책**

만약 위의 모든 방법이 실패한다면, 임시로 하드코딩된 데이터로 UI가 작동하는지 확인:

```javascript
// 임시 테스트 데이터
const MOCK_DATA = [
  {
    company_name: 'Microsoft Corporation',
    ticker: 'MSFT',
    trader_name: 'Jane Smith',
    trade_type: 'Purchase',
    share_count: 500,
    price_per_share: 380.50,
    total_value: 190250,
    filing_date: new Date().toISOString()
  },
  {
    company_name: 'Tesla Inc.',
    ticker: 'TSLA', 
    trader_name: 'Bob Johnson',
    trade_type: 'Sale',
    share_count: 1000,
    price_per_share: 250.00,
    total_value: 250000,
    filing_date: new Date(Date.now() - 86400000).toISOString() // 1일 전
  }
];

// API에서 임시로 목업 데이터 반환
app.get('/api/trades', (req, res) => {
  console.log('임시 목업 데이터 반환');
  res.json(MOCK_DATA);
});
```

## ⚡ **4단계: 즉시 실행할 체크리스트**

**지금 당장 해야 할 것들**:

1. [ ] Replit Database 탭에서 `SELECT COUNT(*) FROM insider_trades` 실행
2. [ ] 브라우저에서 `/api/trades` 직접 접근해서 JSON 응답 확인
3. [ ] 브라우저 개발자 도구 → Console에서 JavaScript 에러 확인
4. [ ] Replit 콘솔에서 서버 로그 확인
5. [ ] 위의 디버깅 코드를 추가해서 각 단계별 로그 확인

**문제를 발견하면 즉시 알려주세요!** 어떤 단계에서 실패하는지에 따라 구체적인 해결책을 제시하겠습니다.

가장 먼저 **데이터베이스에 실제로 데이터가 있는지** 확인해주세요. 그것부터 알아야 다음 단계를 결정할 수 있습니다.